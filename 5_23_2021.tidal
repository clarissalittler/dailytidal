-- Hi everyone! It's another daily TidalCycles practice video
-- This time we're going to try practicing with doing weird
-- layerings on top of a smaller number of patterns and see
-- what we can do
-- Then, I might turn on my mic and we'll have a brief discussion
-- of a couple of functions I'm trying to figure out how to use
-- before signing off

-- Interesting! putting the variation into the
-- euclidean rhythm actually kinda munged the striation!!

-- keeping the right pulse is important even for the shape of the bite
-- okay look this is the very first time I've used jux rev on camera
-- cut me some heck!!!
d1 $ someCyclesBy 0.4 (jux rev)
   $ someCyclesBy 0.7 (bite 16 "<[0 <1 3*2> 2 0] [0 3 8 0] 0*4>")
   $ superimpose (striate "[32|64|128]")
   $ s "jvbass(7,8)"
   # gain (range 0.83 0.97 $ fast 4 sine)
   # room 0.7
   # vowel "{o u a}%5"

xfade 1 silence

d2 $ degradeBy 0.25 $ s "[lo|hi]*8"
                    # n ("0 1 2" + "1 1")
                    # room 0.5

xfade 2 silence

d3 $ s "808ht*2 ~ 808ht*4 ~" # room 0.4 # n "0 1"

xfade 3 silence

-- Okay, mic on
-- here's a function for using continuous patterns
-- easier with other functions because I keep wanting to
-- have random numbers without tanking the pattern structure

:t (>>=)
t> (>>=) :: Monad m => m a -> (a -> m b) -> m b

:t fmap
fmap :: Functor f => (a -> b) -> f a -> f b

:t segment
segment :: Pattern Time -> Pattern a -> Pattern a

:t cbind
t> cbind :: (t -> Pattern b) -> Pattern t -> Pattern b

:t cfmap
t> cfmap :: (t -> b) -> Pattern t -> Pattern b

let cbind f c = do
              n <- segment 1 c
              f n
    cfmap f c = do
              n <- segment 1 c
              return $ f n
    cutN n l = take (n-1) l ++ drop n l 
-- it's almost fmap but not quite, see?

"a'm11" :: Pattern Double

import Sound.Tidal.Chords

chordList

:t stack

d1 $ s "[lo|hi]*8" # n "0 1 2"

d2 $ someCyclesBy 0.6 (bite 16 "0 1 2 0")
   $ someCyclesBy 0.5 (stut 4 0.8 (1/16))
   $ superimpose (striate "64")
   $ s "jvbass(7,8,<0,1,2>)"
