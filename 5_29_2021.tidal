-- Welcome!

:t ur
t> ur
  :: Time
     -> Pattern String
     -> [(String, Pattern a)]
     -> [(String, Pattern a -> Pattern a)]
     -> Pattern a

-- wait I could have sworn the multiplication worked inside the ur pattern string
-- have I somehow been wrong about this?
-- Okay, yeah, I've been completely wrong!
-- Weird! So when it comes to ur what *does* work? Clearly alternation
-- with < > works

....let's go look at the code

{-
ur source
-}

:t unwrap
t> unwrap :: Pattern (Pattern a) -> Pattern a

:t (<$>)
(<$>) :: Functor f => (a -> b) -> f a -> f b

ur :: Time -> Pattern String -> [(String, Pattern a)] -> [(String, Pattern a -> Pattern a)] -> Pattern a
ur t outer_p ps fs = _slow t
         $ unwrap $ adjust <$> timedValues (getPat . split <$> outer_p)
  where split = wordsBy (==':')
        getPat (s:xs) = (match s, transform xs)
        -- TODO - check this really can't happen..
        getPat _ = error "can't happen?"
        match s = fromMaybe silence $ lookup s ps'
        ps' = map (fmap (_fast t)) ps
        adjust (a, (p, f)) = f a p
        transform (x:_) a = transform' x a
        transform _ _ = id
        transform' str (Arc s e) p = s `rotR` inside (pure $ 1/(e-s)) (matchF str) p
        matchF str = fromMaybe id $ lookup str fs
        timedValues = withEvent (\(Event c (Just a) a' v) -> Event c (Just a) a' (a,v)) . filterDigital


ur 8 "heck*2 heck heck heck*4" [("heck", s "bd")] []
t> (0>1)|s: "bd"

ur 8 "heck*3 heck heck heck*4" [("heck", s "bd")] []
t> (0>⅔)|s: "bd"
(⅔>1)|s: "bd"

d1 $ s "bd*64"

d1 $ s "bd*1024"

d1 $ ur 2 "heck*16 heck*8 heck*4 heck" [("heck", s "bd*64")] []


t> (0>¼)|s: "bd"
(¼>½)|s: "bd"
(½>¾)|s: "bd"
(¾>1)|s: "bd"


d1 $ ur 8 "drums*8 drums:gappa"
    [("drums", s "[[[bd, [~ future]]*2]|[sd*2 ~ sd sd*4?]]"),
     ("mel", s "arpy(7,8)"
        # n (segment 1 (range 0 5 $ slow 4 sine) + "0 1") # speed 0.5)]
    [("gappa", gap "<8 16 32>")]
