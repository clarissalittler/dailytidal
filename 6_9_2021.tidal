data Heck a = Dog a | Cat

:i Maybe
t> type Maybe :: * -> *
data Maybe a = Nothing | Just a
  	-- Defined in `GHC.Maybe'

:i Heck Double


t> type Heck :: * -> *
data Heck a = Dog a | Cat
  	-- Defined at :142:1
type Double :: *


:t return
t> return :: Monad m => a -> m a

:t petToMod
t> petToMod :: Heck Double -> ControlPattern

:t (>>=)
t> (>>=) :: Monad m => m a -> (a -> m b) -> m b

let petToMod (Dog d) = distort ((return d)/2)
    petToMod Cat = pan rand
    hecker = rand >>= (\r -> if r < 0.6 then return (Dog r) else return Cat)
    {- hecker = do
          r <- rand
          if r > 0.6
           then return (Dog r)
           else return Cat -}


d1 $ s "bd*8" # (hecker >>= petToMod)





data Heck = Dog Double | Cat


let hecker = do
     r <- rand
     if r > 0.5
      then return $ Dog r
      else return $ Cat
    petToMod (Dog d) = distort ((return d) /2)
    petToMod (Cat) = pan rand

d1 $ s "bd*8" # (hecker >>= petToMod)
