{-
Hi everyone, welcome back to our almost daily series after another hiatus
Let's just see if we can make something simple as a warm up, okay?
-}

-- huh, wait a second, ah okay so basically I'm restarting SC now
-- could I take this as an opportunity to restart the video?
-- Yes. Will I? No. Instead while it boots let's talk about how patterns
-- are probably comonads not monads and that this will fix a lot of the things
-- that I fundamentally feel like I want from Tidal programming.
-- basically if a monad is a thing you can order that has side-effects
-- then a comonad is a thing you can order that has a context for the computation
-- in the case of pattern the context would be the rest of the pattern outside
-- of the next event that hasn't yet been played
-- this would allow us to do things like the kind of "integration"
-- over patterns that seems like one should be able to do like really easily
-- the question of course is what happens to pattern interference and such
-- since that's arguably one of the coolest things about Tidal
-- there's also the dang question of whether a comonadic lens would potentially
-- allow for more interesting playing with time and such
-- I remember awhile back Alex talking about wondering what it would mean to
-- have a sense of scratching in Tidal the way one would do with a turntable
-- would arbitrary transformations of patterns as events-in-context help with that?
-- oh good lord I have no idea I just think there's way more math here
-- that we should be exploiting
-- I feel like Pattern as a structure has a lot of depth that I'd like
-- to smack with all my rusty old category theory hammers, maybe finding
-- some interesting new ways to describe structure in time

-- oh Windows finally let SC start

-- Haha whoops don't load samples while music is playing

d1 $ jux (|- n 12)
   $ s "superchip(<3 <5 7>>,<4 8>,<0 2 4>)"
   # n (scale "minPent" $ sometimes (|+ "[[0,-2,-3]|[0,-3]|[0,-1,-3]]")
                        $ "-1 <2 4> <-1 -2 1> 0" + "-1 <0 2> -3")
   # release "{0.7 0.6 0.8 0.9 0.5}%2"
   # voice "{0.1 0.2 0.3}%4"
   # pan (slow 16 sine)
   # shape 0.1

d2 $ s "<kick [kick sn]>" # delay 0.5 # room 0.1

d3 $ off "e" (|+ n 2) $ every 5 (struct "t(7,8)")
   $ s "glitch*8?" # n 0 # gain 1.3

d4 $ every 4 (ply 2) $ s (stack ["linnhats*8",rotL (1/16) "hh27*8"])

xfade 1 silence

-- thanks everyone for watching and potentially reading my rants and rambles
-- until next time, take care

d5 $ s "<bottle ~>*<2 4 8>"
